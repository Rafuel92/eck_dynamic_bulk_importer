<?php

/**
 * @implements hook_menu()
 *
 * eck_dynamic_bulk_importer_menu function.
 *
 */
function eck_dynamic_bulk_importer_menu() {
	$items['admin/config/eck-dynamic-importer'] = array(
    'title' => 'ECK Dynamic Bulk Importer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eck_dynamic_bulk_importer_settings'),
    'access arguments' => array('administer site configuration')
  );
  $items['admin/config/eck-dynamic-importer/tab1'] = array(
    'title' => 'Enabled Entities',
    'page callback' => 'drupal_get_form',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/eck-dynamic-importer/tab2'] = array(
    'title' => 'Enabled Fields', 
    'page callback' => 'drupal_get_form',
    'type' => MENU_LOCAL_TASK,
    'page arguments' => array('eck_dynamic_bulk_importer_fields_form'),
    'access arguments' => array('administer site configuration'),
  );
  $items ['eck-dynamic-importer-data-import'] = array (
    'title' => 'Add data from CSV file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array ('eck_dynamic_bulk_importer_form'),
    'access callback' => 'eck_dynamic_bulk_importer_data_import_can_import',
  );
  return $items;
}

/**
 * eck_dynamic_bulk_importer_get_enabled_entities_and_bundles function.
 *
 * Gets enabled Entities and Bundles json decoded
 * @access public
 * @return json decoded object
 */
function eck_dynamic_bulk_importer_get_enabled_entities_and_bundles() {
	$received_json = variable_get('eck_dynamic_bulk_importer_enabled_entitise',false);
	$enabled_entity_fields_mapping = json_decode($received_json); 
	return $enabled_entity_fields_mapping;
}

/**
 * eck_dynamic_bulk_importer_get_enabled_fields_default_values function.
 *
 * Gets enabled Fields json decoded
 * @access public
 * @return json decoded object
 */
function eck_dynamic_bulk_importer_get_enabled_fields_default_values() {
	if(strlen(variable_get('eck_dynamic_bulk_importer_field_structures'))>0){
		$def_values = json_decode(variable_get('eck_dynamic_bulk_importer_field_structures'));
	} else {
		$def_values = NULL;
	}
	return $def_values;	
}

/**
* @implements hook_form()
*
* eck_dynamic_bulk_importer_fields_form function.
*/
function eck_dynamic_bulk_importer_fields_form($form, &$form_state){
	$enabled_entity_fields_mapping = eck_dynamic_bulk_importer_get_enabled_entities_and_bundles();
	$def_values = eck_dynamic_bulk_importer_get_enabled_fields_default_values();
	//eck_dynamic_bulk_importer_field_weight
	$weight = variable_get('eck_dynamic_bulk_importer_field_weight', '');
	$current_weight = 0;
	if($weight != '' ){
			$weight = json_decode($weight);		
	}
	if(!isset($enabled_entity_fields_mapping->enabled_entity_types)) {
		$form['markup'] = array(
		'#markup' => l(t('No enabled entities found. Go to the Manage Entities Page'), '/admin/config/eck-dynamic-importer'),
		);
		return $form;
	}

	foreach($enabled_entity_fields_mapping->enabled_entity_types as $entity => $bundles){
		$form['group_'.$entity] = array(
			'#type' => 'fieldset', 
			'#title' => $entity, 
		  '#collapsible' => TRUE, 
		  '#collapsed' => FALSE,
		);
		foreach($bundles as $k => $v) {
			$form['group_'.$entity]['field_'.$v] = array(
				'#type' => 'fieldset', 
				'#title' => $entity . "-" . $v, 
			  '#collapsible' => TRUE, 
			  '#collapsed' => FALSE,
			);
			$all_fields = field_info_instances($entity, $v);
			//concat properties
			$all_fields += array(
				'title'=>'title',
				'uid' => 'uid',
				'author' => 'author',
				'created' => 'created',
				'changed' => 'changed',
			);
			foreach($all_fields as $field_name => $infos){
				if(isset($def_values->enabled_entity_types->{$entity}->{$v}))	{
					if(isset($def_values) && !empty($def_values) && in_array($field_name,$def_values->enabled_entity_types->{$entity}->{$v})){
						$default_value = 1;
					} else {
						$default_value = 0;
					}
				} else {
					$default_value = 0;
				}
				//weight of field
				$key_object = "dyn_eck_importer--".$entity."--".$v."--".$field_name;
				if(isset($weight->$key_object) && !empty($weight->$key_object)){	
					$current_weight = $weight->$key_object;
				} else {
					$current_weight++;
				}
				$form['group_'.$entity]['field_'.$v]["dyn_eck_importer--".$entity."--".$v."--".$field_name] = array(
					'#type' => 'checkbox',
					'#title'=> $field_name,
					'#weight' =>$current_weight,
					'#default_value' => $default_value
					
				);
				$form['group_'.$entity]['field_'.$v]["dyn_eck_importer--".$entity."--".$v."--".$field_name."--weight"] = array(
					'#type' => 'textfield',
					'#title' => $field_name.' weight',
					'#default_value' =>$current_weight
				);
			}
		}		
	}
	$form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
	$form['download'] = array(
  	'#type' => 'submit',
    '#value' => t('Save and Download files .csv examples'), 
    '#download_button' => TRUE,
  );
  $form['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset Fields'),
    '#reset_form' => TRUE,
  );
	$form['#submit'][] = 'eck_dynamic_bulk_importer_save_fields_settings';
	return $form;
}

function eck_dynamic_bulk_importer_download_csv_example(&$form,&$form_state){
  $dati_json = variable_get('eck_dynamic_bulk_importer_field_structures');
  $dati = json_decode($dati_json);
  //creo file csv di esemprio
  $path_general_folder = drupal_realpath('public://eck_dynamic_bulk_importer_file/');
  $path_csv =  $path_general_folder . '/csv/';
  $path_zip = $path_general_folder.'/zip';
  file_prepare_directory($path_zip , FILE_CREATE_DIRECTORY);
  foreach($dati->enabled_entity_types as $name_bundle => $bundle){
      //crea la cartella del bundle     
      file_prepare_directory($path_csv , FILE_CREATE_DIRECTORY);
      //apro o creo il file csv
      $file_path = $path_csv . '/' . $name_bundle . ".csv";
      $examplefile = fopen( $file_path, "w");   //Apro o creo il file
      $string = '';
      foreach($bundle as $n => $field){
        foreach($field as $name){
          //creo la stringa da inserire nel file
          $string .= $name . ';';
        }
      }
      //inserisco il field nel file creato prima
      file_put_contents( $file_path, $string);
      //chiudo il file
      fclose($examplefile);
      crea_zip_file($path_csv ,$path_zip . '/example.zip');
      $file_uri = file_create_url(file_build_uri('eck_dynamic_bulk_importer_file/zip/example.zip'));
      drupal_goto($file_uri);
  }
}


function crea_zip_file($source, $destination){
    if (!extension_loaded('zip') || !file_exists($source)) {
      return false;
    }
    $zip = new ZipArchive();
    if (!$zip->open($destination, ZIPARCHIVE::CREATE)) {
      return false;
    }
    $source = str_replace('\\', '/', realpath($source));
    if (is_dir($source) === true) {
      $files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($source), RecursiveIteratorIterator::SELF_FIRST);
      foreach ($files as $file) {
        $file = str_replace('\\', '/', $file);
        // Ignoro "." e ".." file
        if( in_array(substr($file, strrpos($file, '/')+1), array('.', '..')) )
          continue;
        $file = realpath($file);
        if (is_dir($file) === true){
          $zip->addEmptyDir(str_replace($source . '/', '', $file . '/'));
        }
        elseif (is_file($file) === true){
          $zip->addFromString(str_replace($source . '/', '', $file), file_get_contents($file));
        }
      }
    }
    elseif (is_file($source) === true){
      $zip->addFromString(basename($source), file_get_contents($source));
    }
    return $zip->close();
  }

/**
 * eck_dynamic_bulk_importer_save_fields_settings function.
 *
 * @access public
 * @param mixed &$form
 * @param mixed &$form_state
 * @return void
 */
function eck_dynamic_bulk_importer_save_fields_settings(&$form,&$form_state){
	if (isset($form_state['triggering_element']['#reset_form'])) {
		eck_dynamic_bulk_importer_reset_all_variables ($form);
		return;
	}
	$enabled_entity_fields_mapping = eck_dynamic_bulk_importer_get_enabled_entities_and_bundles();
	$values = $form_state['values'];
	$weight_field = array();
	foreach($values as $key_field => $value_field){
		if (strpos($key_field, '--weight') !== false) {
			$key = str_replace('--weight', '', $key_field);
			$weight_field[$key] =  	$value_field;
			unset($values[$key_field]);
		}
	}
	$weight_field = array_flip($weight_field);
	$weight_field = krsort($weight_field);
	$weight_field_json = json_encode($weight_field);	
	variable_set('eck_dynamic_bulk_importer_field_weight',$weight_field_json);
	$decorated_entity_fields_mapping = eck_dynamic_bulk_importer_decorate_entity_bundles_with_fields($enabled_entity_fields_mapping,$values);
	$json_encoded_field_structures_array = json_encode($decorated_entity_fields_mapping);
	variable_set('eck_dynamic_bulk_importer_field_structures',$json_encoded_field_structures_array);
    if (isset($form_state['triggering_element']['#download_button'])) {
      eck_dynamic_bulk_importer_download_csv_example ($form,$form_state);
    }
}

/**
 * eck_dynamic_bulk_importer_decorate_entity_bundles_with_fields function.
 *
 * @access public
 * @param mixed $enabled_entity_fields_mapping
 * @param mixed $values (default: NULL)
 * @return void
 */
function eck_dynamic_bulk_importer_decorate_entity_bundles_with_fields($enabled_entity_fields_mapping,$values=NULL) {
	$field_structures_array = array();
	$field_structures_array['enabled_entity_types'] = array();
	foreach($enabled_entity_fields_mapping->enabled_entity_types as $entity_name =>$bundle){
		$field_structures_array['enabled_entity_types'][$entity_name] = array();
		foreach($bundle as $key => $value){
			$field_structures_array['enabled_entity_types'][$entity_name][$value] = array();
		}		
	}
	foreach ($values as $k => $v) {
		$is_eck_dynamic_field = strpos($k,'dyn_eck_importer');
		if($is_eck_dynamic_field !== false) {
			$current_field_array = explode('--',$k);
			$entity_name = $current_field_array[1];
			$bundle_name = $current_field_array[2];
			$field_name = $current_field_array[3];
			if (isset($values["dyn_eck_importer--$entity_name--$bundle_name--$field_name"]) && $values["dyn_eck_importer--$entity_name--$bundle_name--$field_name"] == 1) {
				$field_structures_array['enabled_entity_types'][$entity_name][$bundle_name][] = $field_name;
			}
		}
	}
	return $field_structures_array;	
}

/**
 * eck_dynamic_bulk_importer_settings function.
 *
 * @access public
 * @return void
 */
function eck_dynamic_bulk_importer_settings() {
  $entity_list = entity_get_info();
  $default_enabled_entities = variable_get('eck_dynamic_bulk_importer_enabled_entitise',false);
  if ($default_enabled_entities) {
	  $enabled_entities_structure_default = json_decode($default_enabled_entities);
  }
  foreach ($entity_list as $entity_name => $entity_value) {
    if (isset($entity_value['module']) && !empty($entity_value['module'])) {
      if ($entity_value['module'] == 'eck') {
        $eck_entity[$entity_name] = $entity_value;
        $is_checked = false;
        if (isset($enabled_entities_structure_default->enabled_entity_types->{$entity_name})) {
					$is_checked = true;
	      }
        //Iteration Entities
        $form['entity_enable'][$entity_name] = array(
          '#type' => 'fieldset',
          '#title' => ucfirst($entity_name),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
          '#default_value' => $is_checked,
        );
        //Iteration Bundles
        foreach ($entity_value['bundles'] as $bundle_name => $bundle) {
	        $bundle_is_checked = false;
	        if(isset($enabled_entities_structure_default->enabled_entity_types->{$entity_name})){
		        if(in_array($bundle_name, $enabled_entities_structure_default->enabled_entity_types->{$entity_name})) {
		        	$bundle_is_checked = true;		        
		        }
	        }
          $form['entity_enable'][$entity_name][$entity_name . "--" . $bundle_name] = array(
            '#type' => 'checkbox',
            '#title' => ucfirst($bundle_name),
            '#default_value' => $bundle_is_checked,
          );
        }
      }
    }
  }
  $form['#submit'][] = 'eck_dynamic_bulk_importer_settings_submit';
  $form['reset'] = array(
  '#type' => 'submit',
  '#value' => t('Reset Entities'),
  '#reset_form' => TRUE,
);
  return system_settings_form($form);
}

/**
 * eck_dynamic_bulk_importer_settings_submit function.
 *
 * @access public
 * @param mixed $form
 * @param mixed &$form_state
 * @return void
 */
function eck_dynamic_bulk_importer_settings_submit($form , &$form_state) {
	if (isset($form_state['triggering_element']['#reset_form'])) {
		eck_dynamic_bulk_importer_reset_all_variables ($form);
		return;
	}
  $enabled_entities_array = array();
  foreach ($form_state['values'] as $entity_structure => $entity_structure_value) {
    $entity_structure_explode = explode('--' , $entity_structure); 
    if (count($entity_structure_explode) > 1 ) {
      if ($entity_structure_value == 1) {
        $enabled_entities_array['enabled_entity_types'][$entity_structure_explode[0]][] = $entity_structure_explode[1];
      }
    }
  }
  $json_output = drupal_json_encode($enabled_entities_array);
  variable_set('eck_dynamic_bulk_importer_enabled_entitise' , $json_output);
}

/**
 *  Implements hook_form().
 * eck_dynamic_bulk_importer_form function.
 *
 * @access public
 * @param mixed $form
 * @param mixed &$form_state
 * @return void
 */
function eck_dynamic_bulk_importer_form($form, &$form_state){
  $array_of_enabled_fields = eck_dynamic_bulk_importer_get_enabled_entities_and_bundles();  
  $form = array ();
  if(!$array_of_enabled_fields){
	  $link = l(t('ECK Dynamic config'),'admin/config/eck-dynamic-importer');
	  drupal_set_message(t("Enable entities and fields in this section $link"));
	  return $form;
  }
  foreach($array_of_enabled_fields->enabled_entity_types as $entity_name => $entity){
    foreach($entity as $bundle_name => $bundle){
      $options[$bundle] = $entity_name.'--'.$bundle;
    }
  }
  $form ['bundle'] = array (
    '#type' => 'radios',
    '#title' => t ( 'Choose a type of bundle' ),
    '#options' => $options,
  );
  $form ['upload_field'] = array (
    '#type' => 'file',
    '#title' => t ( 'Choose a file' ),
  );		
  $form ['submit'] = array (
    '#type' => 'submit',
    '#value' => t ( 'Import file csv' ),
  );

  return $form;

}
//Gestione permessi accesso importatore
function eck_dynamic_bulk_importer_data_import_can_import(){
  return TRUE;
}


/**
 * eck_dynamic_bulk_importer_form_submit function.
 *
 * @access public
 * @param mixed $form
 * @param mixed &$form_state
 * @return void
 */
function eck_dynamic_bulk_importer_form_submit($form, &$form_state) {
  $count = 0;
	$entity_structure = eck_dynamic_bulk_importer_get_enabled_fields_default_values();
	//recupero il bundle name
	$bundle_type = $form_state['values']['bundle'];
	// Recupero gli input del form
	$form_choose = $form_state['complete form']['bundle']['#options'][$bundle_type];
	$choosed_structure = explode('--', $form_choose);
	// Recupero l'entità
	$choosed_entity = $choosed_structure[0];
	// Recupero il bundle
	$choosed_bundle = $choosed_structure[1];
  $entity_type = $choosed_entity;
  $bundle_type = $choosed_bundle;
	$array_of_enabled_fields = new StdClass();
	$array_of_enabled_fields->enabled_fields = $entity_structure->enabled_entity_types->{$choosed_entity}->{$choosed_bundle};
  $filepath = 'public://import-data';
  //inserisco il file appena caricato nella cartella "import-data"
  // verifico che il path esiste
  file_prepare_directory ( $filepath, FILE_CREATE_DIRECTORY );
  $file = file_save_upload ( 'upload_field', array (
    'file_validate_extensions' => array (
      'csv'
    )
  ), $filepath, FILE_EXISTS_REPLACE );
  $file->status = FILE_STATUS_PERMANENT;
  $file = file_save ( $file );
  ini_set ( 'auto_detect_line_endings', TRUE );
  if (($handle = fopen ( $file->uri, "r" )) != FALSE) {
    // con il ciclo while ciclo le righe
    $first_row = TRUE; //Flag per gestire la prima riga del file
    while ( ($data = fgetcsv ( $handle, 0, ";" )) != FALSE ) {
      // salto le intestazioni
      if ($first_row) {
         $first_row = FALSE;
         continue;
      }
      $num = count ( $data );
      // inizializzo le colonne da parsare
      $col = 0;
      // con il ciclo for ciclo le colonne di quella riga
      while ( $col < $num ) {
          $array_associativo = array();
          foreach ($data as $key => $field ){
            $array_associativo[$array_of_enabled_fields->enabled_fields[$key]] = $field;
          }
          //creo l'entità con i field ottenuti
          $entity = entity_create($entity_type, array('type' =>$bundle_type));
          foreach($array_associativo as $field => $field_value){
						if(strpos($field, 'field_')!==false){
            	$entity->{$field}[LANGUAGE_NONE][0] = $field_value;
            } elseif($field == 'author' || $field == 'uid'){
	            $account = user_load_by_name($field_value);
	            if(!$account){
		            drupal_set_message(t("User $field_value of author property does not exists"),'error');
								return;
	            }
	            $entity->{$field} = $account->uid;
	          } else {
	            $entity->{$field} = $field_value;
            }
          }
          if($col+1 == $num){
	          try {
		          entity_save($choosed_entity,$entity);
		          $count ++;
	          } catch(Exception $e) {
		          dpm($e);
	          }             
          }
        $col ++;
      }
    }
    fclose ( $handle );
    ini_set ( 'auto_detect_line_endings', FALSE );
    drupal_set_message(t("$count Entities has been saved"));
  }
}
/**
 * eck_dynamic_bulk_importer_reset_all_variables function.
 *
 * @access public
 * @param mixed $form
 * @return void
 */
function eck_dynamic_bulk_importer_reset_all_variables ($form) {
	$def_values_array = array();
	if($form['form_id']['#value'] == 'eck_dynamic_bulk_importer_settings') {
		$def_values_array['eck_dynamic_bulk_importer_enabled_entitise'] = FALSE;
		$def_values_array['eck_dynamic_bulk_importer_field_structures'] = 0;
		$def_values_array['eck_dynamic_bulk_importer_field_weight'] = '';
	}
	if($form['form_id']['#value'] == 'eck_dynamic_bulk_importer_fields_form') {
		$def_values_array['eck_dynamic_bulk_importer_field_structures'] = 0;
		$def_values_array['eck_dynamic_bulk_importer_field_weight'] = '';
	}
	foreach ($def_values_array as $k => $v) {
		variable_set($k,$v);
	}
}